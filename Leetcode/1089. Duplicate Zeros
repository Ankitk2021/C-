class Solution {
public:

// Time complexity = O(n2)
    void duplicateZeros(vector<int>& arr) {



        int n = arr.size();
        int curr;

        for (int i = 0; i < n; i++) { // O(n)
            curr = arr[i];
            if (curr == 0){

                arr.insert(arr.begin()+i,0);  //O(n)
                i++;
            }
        }

        arr.resize(n);
    }
};



// TC O(N)

class Solution {
public:
    void duplicateZeros(vector<int>& arr) {
        int n = arr.size();
        int dups = 0 ;
        int last = n-1;

        //first loop.
        // check no of zero . And to total duplicate to do . If zero is at last then no duplicate is possible so put zero

        for(int i = 0 ; i <= (last - dups) ; i++){

            if(arr[i]==0){
                //check if it is on edge or not
                if(i==(last-dups)){
                    arr[last] = 0;
                    last--;
                    break;
                }else {
                    dups++;

                }  
            }
        } 


        //second loop

        int j = last - dups;

        for(j;j>=0;j--){
           if(arr[j]==0){
             arr[j+dups] = 0;
            dups-- ;
            arr[j+dups] = 0;
           }else {
            arr[j+dups] = arr[j];
           }

        }
    }
};
