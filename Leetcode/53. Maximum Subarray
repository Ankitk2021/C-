// M-1 : TLE ü§í
// T.C. : O(n3)

#include <climits>
#include <vector>

class Solution {
public:
    int sumKaro(vector<int>& nums) {
        int sum = 0;

        for (int x : nums) {

            sum += x;
        }
        return sum;
    }

    int maxSubArray(vector<int>& nums) {

        int currentSum = INT_MIN;
        int temp_sum = 0,n= nums.size();
        int i, j, k;

        vector<int> subArr = {};

        // outerLoop

        for (i = 0; i < n; i++) {

            for (j = i; j < n; j++) {

                for (k = i; k <= j; k++) {

                    subArr.push_back(nums[k]);
                }

                temp_sum = sumKaro(subArr);

                if (temp_sum > currentSum) {
                    currentSum = temp_sum;
                }

                subArr = {};
            }
        }

        return currentSum;
    }
};

// M -2 : O(n2) ‚≠ê
// TLE ü§í

#include <climits>
#include <vector>

class Solution {
public:
    int maxSubArray(vector<int>& nums) {

        int currentSum = INT_MIN;
        int temp_sum = 0;
        int i, j;
        int n = nums.size();

        // outerLoop

        for (i = 0; i < n; i++) {

            temp_sum = 0;

            for (j = i; j < n; j++) {

                temp_sum += nums[j];
                if (temp_sum > currentSum) {

                    currentSum = temp_sum;
                }
            }
        }

        return currentSum;
    }
};

// M -3 : O(n)
// TLE üôÖ

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
int n = nums.size();
int temp_sum = 0;
int sum = INT_MIN;

/*
The main logic to solve this problem using Kdane Algorithm is that 
add the sum if sum is only positive. 
*/

        for(int i = 0;i<n;i++){

            temp_sum = temp_sum + nums[i] ;

            if(temp_sum > sum){
                 sum = temp_sum;  
            }

            if(temp_sum < 0 ) {
                temp_sum = 0;
            }

        }
        return sum;
        
    }
};

