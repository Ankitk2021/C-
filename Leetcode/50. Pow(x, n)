// M1 : O(n)
// TLE ğŸ¤’

class Solution {
public:
    double myPow(double x, int n) {

        if(n==0) return 1.0;
        if(x==0) return 0.0;
        if(x==(-1)){
            if(n%2==0) return 1.0;
            else if(n%2 !=0) return -1.0;
        }
       long double ans = 1;
        int p = abs(n);
        for(int i = 0;i<p;i++){
            ans =  ans*x;
        }

        double t;
        if(n>0){
            t = ans;
        }else {
            t = 1/ans;
        }
        return t;
        
    }
};


// M 2 : Bitwise Exponentiation 
// TC : O(nlogn) : Most optimised
class Solution {
public:
    double myPow(double x, int n) {
        //edge cases 
        if(n==0) return 1.0;
        if(x==0) return 0.0;
        if(x==1) return 1.0;
        if(x==(-1)){
            if(n%2==0){
                return 1;
            }else {
                return -1;
            }
        }

       long long int bin = abs((long long)n);
       long double temp = x;
        long double ans = 1.0;
        while(bin>0){
            if(bin&1 == 1){
                ans *= temp;
            }
            temp = temp * temp;
            bin /= 2;
        }

        if(n>0){
            return ans;
        }

        return (1/ans);
    }
};
