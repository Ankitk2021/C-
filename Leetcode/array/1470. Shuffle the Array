1.BRUTE

class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {

        int p = 0;
        int q = n;
        vector<int> ans;

        while(p<n && q < nums.size()){

            ans.push_back(nums[p++]);
             ans.push_back(nums[q++]);

        }

        
       return ans; 
    }
};

2.OPTIMISED  : dECODING AND ENCODING

class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {

        for (int i = 0; i < n; i++) {

            nums[i] = nums[i] + nums[i + n] * (10000);
        }

        int a, b;

        int idx = 2 * n - 1;

        for (int i = n - 1; i >= 0; i--) {

            a = nums[i] % (10000);
            b = nums[i] / (10000);

            nums[idx--] = b;
            nums[idx--] = a;
        }

        return nums;
    }
};
