class Solution {
public:

//Brute Force
    int pivotIndex(vector<int>& nums) {
        int index = -1;
        int i;
        int j;
        int k;
        int sum1, sum2;

        for (i = 0; i < nums.size(); i++) {

            sum1 = 0, sum2 = 0;

            for (j = 0; j < i; j++) {
                sum1 = sum1 + nums[j];
            }
            for (k = i + 1; k < nums.size(); k++) {
                sum2 = sum2 + nums[k];
            }
            if (sum1 == sum2) {
                index = i;
                break;
            }
        }

        return index;
    }
};


//Optimized


class Solution {
public:
    int sum(vector<int>& nums) {
        int i = 0;
        for (int x : nums) {

            i += x;
        }
        return i;
    }

    int pivotIndex(vector<int>& nums) {

        int i;
        int total = sum(nums);
        int left = 0;
        int right;
        for (i = 0; i < nums.size(); i++) {

            // not to include pivot element
            right = total - left - nums[i];

            if (right == left) {
                return i;
            } else {
                left = left + nums[i];
            }
        }

        return -1;
    }
};
