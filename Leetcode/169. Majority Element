//M 1 TLE ü§í

#include <climits>
class Solution {
public:
    int fr(vector<int>& nums, int x) {
        int c = 0;

        for (int e : nums) {

            if (e == x) {
                c++;
            }
        }
        return c;
    }
    int majorityElement(vector<int>& nums) {

        int ans = INT_MIN;
        int m = nums.size()/2;
       
        for (int i = 0; i < nums.size(); i++) {

           if(fr(nums,nums[i])>m){
            ans = max(nums[i],ans);
           }


        }

        return ans;
    }
};

// M2 Optimized : O(n) ‚≠ê

class Solution {
public:
    int majorityElement(vector<int>& nums) {
       
       if(nums.size() == 1) return nums.front();
       


        sort(nums.begin(),nums.end());
        int ans = -1;
        int count  = 1;
        int prev = nums[0];

        for(int  i = 1;i<nums.size() ; i++){

            if(nums[i] == prev){
                count ++; 
            }else {
                count  = 1;
                prev = nums[i];
            }

            if(count > (nums.size()/2)){
                ans = prev;
            }

        }
        return ans;
    }
};


// M 2  ‚≠ê
// no TLE
// TC : nlogn (sort) + o(n) (loop)


class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int fr = 1;
        int ans;
        sort(nums.begin(),nums.end());
        if(nums.size()==1) return nums[0]; // edge case
        for(int i = 1;i<nums.size();i++){
         if(nums[i]==nums[i-1]){
         fr++;
        }else {
         fr = 0;
        }

        if(fr >= (nums.size()/2)){
            ans = nums[i];
        };

        }
        return ans;
        
    }
};



// M 3 : MOORE VOTING ALGO 
// MOST OPTIMISED ‚≠ê‚≠ê‚≠ê

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        // MOORE VOTING ALGO
        int ans = 0;
        int freq = 0;

        for (int i = 0; i < nums.size(); i++) {
            if (freq == 0) {
                ans = nums[i];
            }
            if (nums[i] == ans) {
                freq++;
            } else {
                freq--;
            }
        }

        // add on : edge case : what if no majority element is present

        int count = 0;

        for (int x : nums) {
            if (x == ans) {
                count++;
            }
        }
        if (count >= (nums.size() / 2)) {
            return ans;
        } else {
            return -1;
        }
        return ans;
    }
};
