class Solution {
public:
/*

s -> start
e -> end



*/
    int firstOc(vector<int>& nums, int target) {
        int ans = -1;

        int s, e, mid;
        s = 0;
        e = nums.size() - 1;

        mid = s + (e - s) / 2;

        while (s <= e) {

            if (target == nums[mid]) {
                ans = mid;
                e = mid - 1;
            } else if (target > nums[mid]) {

                s = mid + 1;

            } else if (target < nums[mid]) {

                e = mid - 1;
            }

            mid = s + (e - s) / 2;
        }

        return ans;
    }
    int lastOc(vector<int>& nums, int target) {
        int ans = -1;

        int s, e, mid;
        s = 0;
        e = nums.size() - 1;
        mid = s + (e - s) / 2;

        while (s <= e) {

            if (target == nums[mid]) {
                ans = mid;
               s = mid+1;
            } else if (target > nums[mid]) {

                s = mid + 1;

            } else if (target < nums[mid]) {

                e = mid - 1;
            }

            mid = s + (e - s) / 2;
        }

        return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {

        vector<int> res;
        int a = firstOc(nums, target);
        int b = lastOc(nums, target);

        if (a == b) {
            res.push_back(a);
            res.push_back(b);

        } else {
            res.push_back(min(a, b));
            res.push_back(max(a, b));
        }

        return res;
    }
};
