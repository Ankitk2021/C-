#1 Iterative 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == NULL) return head;

        ListNode* curr = head;
        ListNode* prev = NULL;
        ListNode* forward = curr->next;

        while(curr != NULL){
            forward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forward;
           
        }
        return prev;
        
    }
};



#2 RECURSIVE 

class Solution {
public:
    ListNode* solve(ListNode* curr , ListNode* forw , ListNode* prev){

        if(curr == NULL) return prev;
        forw = curr->next;
        curr->next = prev;
        prev = curr;
        curr = forw;

       return solve(curr,forw,prev);
    }
    ListNode* reverseList(ListNode* head) {

        if(head == NULL || head->next == NULL) return head;

        ListNode* curr = head;
        ListNode* forward = curr->next;
        ListNode* prev = NULL;
        return solve(curr,forward,prev);
    }


};
